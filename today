#!/bin/sh
# today - keep a daily journal
# SPDX-FileCopyrightText: 2022 Sotiris Papatheodorou
# SPDX-License-Identifier: GPL-3.0-or-later
set -eu

usage() {
	name="${0##*/}"
	printf 'Usage: %s [[[YYYY-]MM-]DD]\n' "$name"
	printf '       %s grep ARGUMENT ...\n' "$name"
	printf '       %s log [-v]\n' "$name"
	printf '       %s -h\n' "$name"
}

date_file() {
	printf '%s/%s%s\n' "$TODAY_DIR" "$1" "$TODAY_SUFFIX"
}

todo_file() {
	printf '%s/todo%s\n' "$TODAY_DIR" "$TODAY_SUFFIX"
}

expand_date() {
	case "$1" in
		??)
			printf '%s\n' "$(date '+%Y-%m-')$1"
			;;
		??-??)
			printf '%s\n' "$(date '+%Y-')$1"
			;;
		*)
			printf '%s\n' "$1"
	esac
}

valid_date_file() {
	awk '
	function year(s) { sub("-..-..$", "", s); return s + 0 }
	function month(s) { sub("^....-", "", s); sub("-..$", "", s); return s + 0 }
	function day(s) { sub("^....-..-", "", s); return s + 0 }
	function is_leap(y) {
		if (y % 4 != 0) return 0
		else if (y % 100 != 0) return 1
		else if (y % 400 != 0) return 0
		else return 1
	}
	function valid_prefix(s) {
		prefix = "'"$TODAY_DIR/"'"
		l = length(prefix)
		return substr(s, 1, l) == prefix
	}
	function valid_suffix(s) {
		suffix = "'"$TODAY_SUFFIX"'"
		l = length(suffix)
		return substr(s, length(s) - l + 1) == suffix
	}
	BEGIN {
		days[1] = 31; days[2] = 28; days[3] = 31; days[4] = 30;
		days[5] = 31; days[6] = 30; days[7] = 31; days[8] = 31;
		days[9] = 30; days[10] = 31; days[11] = 30; days[12] = 31;
	}
	NF != 1 { next }
	{
		f = $0
		if (!valid_prefix(f)) next
		sub("^.*/", "", f)
		if (!valid_suffix(f)) next
		f = substr(f, 1, 10)
		if (f !~ /^[0-9]{4}-(0[1-9]|1[0-2])-([0-3][0-9])$/) next
		d = day(f)
		if (is_leap(year(f))) days[2] = 29; else days[2] = 28
		if (d < 1 || d > days[month(f)]) next
		print
	}'
}

edit_file() {
	if [ "$#" -gt 1 ]
	then
		printf 'Too many arguments\n' >&2
		usage >&2
		return 2
	fi
	filename=$(date_file "$(expand_date "$1")" | valid_date_file)
	if [ -z "$filename" ]
	then
		printf 'Invalid date: %s\n' "$1" >&2
		usage >&2
		return 2
	fi
	mkdir -p "${filename%/*}"
	TODAY_FILE="$filename"
	# shellcheck disable=SC2034
	TODAY_TODO=$(todo_file)
	set +e
	eval "$TODAY_CMD"
	set -e
	# Remove empty files.
	if [ ! -s "$TODAY_FILE" ]
	then
		rm -f "$TODAY_FILE"
	fi
}

search_files() {
	grep "$@" "$TODAY_DIR"/*"$TODAY_SUFFIX"
}

view_files() {
	case "$#" in
		0)
			sort_args='-r'
			;;
		1)
			if [ "$1" = '-v' ]
			then
				sort_args=
			else
				printf 'Invalid option to log: %s\n' "$1" >&2
				usage >&2
				return 2
			fi
			;;
		*)
			printf 'Too many options to log\n' >&2
			usage >&2
			return 2
			;;
	esac
	pat="[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$TODAY_SUFFIX"
	find "$TODAY_DIR" -type f -name "$pat" | sort "$sort_args" |
		while IFS= read -r f
	do
		printf '%s\n\n' "$(basename "$f" "$TODAY_SUFFIX")"
		cat "$f"
		printf '\n\n\n'
	done | pager_if_terminal
}

pager_if_terminal() {
	if [ -t 1 ]
	then
		${PAGER:-more}
	else
		cat
	fi
}



# shellcheck disable=SC2016
TODAY_CMD=${TODAY_CMD:-'vim -c "above sp $TODAY_TODO" -c "tabe $TODAY_DIR" -c "tabr" "$TODAY_FILE"'}
TODAY_DIR=${TODAY_DIR-${XDG_DATA_HOME:-${HOME}/.local/share}/today}
TODAY_SUFFIX=${TODAY_SUFFIX-.md}

if [ "$#" -eq 0 ]
then
	set -- "$(date '+%Y-%m-%d')"
fi

case "$1" in
	grep)
		shift
		search_files "$@"
		;;
	log)
		shift
		view_files "$@"
		;;
	-h)
		usage
		;;
	*)
		edit_file "$@"
		;;
esac
